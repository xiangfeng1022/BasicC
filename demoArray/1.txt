1、
清除脏数据 memset函数:用一个常量字节填充内存
#include <string.h> 需要#include <string.h> 包含
void *memset(void *s, int c, size_t n);
memset()函数用s所指向的内存区域的前n个字节填充
 常量字节c。  用c填充 void*s地址 填充size_t n那么长
   
memset(array, 0 ,sizeof(array));
/*把array所指向的内存区域的 sizeof(array)的40个字节填充0*/

2、
二进制
八进制
十进制
十六进制：0 1 2 3 4 5 6 7 8 9 A B C D E F 
        F + 1 = 10  0X0F + 0X01 = 0X10
        0X34 = 3 * 16 ^ 1 + 4 * 16 ^ 0 = 48+4=52
        0XB4 = 11 * 16 ^ 1 + 4 * 16 ^ 0 =

3、
数组的（首）地址 和 数组的首元素地址一样

4、
数组的越界访问 (不可以的)
判断索引的有效性:索引必须是合理的范围RANGE [0 - BUFFER_SIZE -1]
printf("array[-1]: %d\n",array[-1]);

5、
静态数组：优势和劣势
     空间利用率差：要么不够用，要么浪费空间
     int desk[BUFFER_SIZE] = { 0 };
     
动态数组
算法：
    自动扩容
    自动缩容  
    
6、
如何获取数组有多少个元素：数组的总长度 / 每个元素的长度

7、
在C语言中 指针数组不分家 在指针里，用数组的方式打印和数组 的方式打印是相同效果
char *ptr = "helloworld";  //数组存放在栈区  字符串存放在全局区
printf("ptr[0]: %c\n",ptr[0]);
printf("ptr[0]: %c\n",*(ptr + 0)); 

 为什么字符串不能改? 因为字符串是常量，它也是存放在全局区的，不可以修改
ptr[0] = 'H'; //不可以修改  
printf("ptr[0]:%c\n",ptr[0]);//会报段错误

8、
gdb:
gcc -g demoString.c -o demoString

安装gdb: apt-get install gdb
        gdb demoString
        run
        list
